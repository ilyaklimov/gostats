package gostats 

import (
	"testing"
	"reflect"
)


/*
	It is necessary to test:

	Numbers:
	- 1
	- 2
	- 3
	- 9

	The number of numbers before the decimal point:
	- 0
	- 1
	- 2
	- 3
	- max	

	The number of numbers after the decimal point:
	- 0
	- 1
	- 2
	- 3
	- max
	
	Mixing the number of numbers after the decimal point:
	- yes
	- no

	The same numbers (including zeros):
	- yes
	- no

	Negative:
	- yes
	- no
*/


var baseStatDataTests = [][]float64{
	[]float64{4.940656458412465441765687928682213723651e-324},
	[]float64{0},
	[]float64{0.1},
	[]float64{0.11},
	[]float64{0.111},
	[]float64{1.0},
	[]float64{1.1},
	[]float64{1.11},
	[]float64{1.111},
	[]float64{11.0},
	[]float64{11.1},
	[]float64{11.11},
	[]float64{11.111},
	[]float64{111.0},
	[]float64{111.1},
	[]float64{111.11},
	[]float64{111.111},
	[]float64{111.111},
	[]float64{1.797693134862315708145274237317043567981e+308},

	[]float64{4.940656458412465441765687928682213723651e-324, 4.840656458412465441765687928682213723651e-324},
	[]float64{0.0, 0.0}, 
	[]float64{0.1, 0.2}, 
	[]float64{0.11, 0.18}, 
	[]float64{0.111, 0.837}, 
	[]float64{1.0, 2.0}, 
	[]float64{1.1, 2.2}, 
	[]float64{1.11, 2.18}, 
	[]float64{1.111, 2.837}, 
	[]float64{11.0, 18.0}, 
	[]float64{11.1, 18.2}, 
	[]float64{11.11, 18.18}, 
	[]float64{11.111, 18.837}, 
	[]float64{111.0, 837.0}, 
	[]float64{111.1, 837.2}, 
	[]float64{111.11, 837.18}, 
	[]float64{111.111, 837.837}, 
	[]float64{1.797693134862315708145274237317043567981e+308, 1.697693134862315708145274237317043567981e+308},

	[]float64{4.940656458412465441765687928682213723651e-324, 0.1},
	[]float64{0.0, 2.2412}, 
	[]float64{0.1, 40.2}, 
	[]float64{0.11, 0.0}, 
	[]float64{0.111, 10.8}, 
	[]float64{1.0, 2.31}, 
	[]float64{1.1, 2.0}, 
	[]float64{1.11, 2.198}, 
	[]float64{1.111, 2.7}, 
	[]float64{11.0, 8.0009}, 
	[]float64{11.1, 0.2}, 
	[]float64{11.11, 118.180008}, 
	[]float64{11.111, 0.8}, 
	[]float64{111.0, 837113.000003}, 
	[]float64{111.1, 837.2091}, 
	[]float64{111.11, 7.1}, 
	[]float64{111.111, 8.0}, 
	[]float64{62310931.0001230498, 1.697693134862315708145274237317043567981e+308},

	[]float64{4.940656458412465441765687928682213723651e-324, 4.840656458412465441765687928682213723651e-324, 4.740656458412465441765687928682213723651e-324},
	[]float64{0.0, 0.0, 0.0},
	[]float64{0.4, 0.6, 0.8},
	[]float64{0.21, 0.62, 0.73},
	[]float64{0.392, 0.235, 0.311},
	[]float64{4.0, 6.0, 8.0},
	[]float64{4.4, 6.6, 8.8},
	[]float64{4.21, 6.62, 8.73},
	[]float64{4.392, 6.235, 8.311},
	[]float64{21.0, 62.0, 73.0},
	[]float64{21.4, 62.6, 73.8},
	[]float64{21.21, 62.62, 73.73},
	[]float64{21.392, 62.235, 73.311},
	[]float64{392.0, 235.0, 311.0},
	[]float64{392.4, 235.6, 311.8},
	[]float64{392.21, 235.62, 311.73},
	[]float64{392.392, 235.235, 311.311},
	[]float64{1.797693134862315708145274237317043567981e+308, 1.697693134862315708145274237317043567981e+308, 1.597693134862315708145274237317043567981e+308},

	[]float64{4.940656458412465441765687928682213723651e-324, 400.1306, 4.740656458412465441765687928682213723651e-244},
	[]float64{0.01, 100.0, 10.092},
	[]float64{0.4, 10.6, 2.8009},
	[]float64{0.21, 10.62, 20.0},
	[]float64{0.392, 0.235, 0.0},
	[]float64{4.0, 106.0, 0.0001},
	[]float64{4.4, 106.62, 89.8},
	[]float64{4.21, 1096.6202, 0.000001},
	[]float64{4.392, 0.35, 10.11},
	[]float64{21.0, 62.09, 73.0999},
	[]float64{21.4, 0.6124, 73.8099},
	[]float64{21.21, 6.6, 732.0},
	[]float64{21.392, 0.0, 3.3},
	[]float64{392.0, 2352.01, 0.0009},
	[]float64{392.4, 5.62, 30.8124, },
	[]float64{392.21, 25.62, 3.7399, },
	[]float64{392.392, 25.23, 1.3119, },
	[]float64{1.797693134862315708145274237317043567981e+308, 0.0, 10.000009},

	[]float64{4.940656458412465441765687928682213723651e-324, 4.840656458412465441765687928682213723651e-324, 4.740656458412465441765687928682213723651e-324, 4.640656458412465441765687928682213723651e-324, 4.540656458412465441765687928682213723651e-324, 4.440656458412465441765687928682213723651e-324,  4.340656458412465441765687928682213723651e-324, 4.240656458412465441765687928682213723651e-324, 4.140656458412465441765687928682213723651e-324},
	[]float64{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
	[]float64{0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9},
	[]float64{0.11, 0.18, 0.34, 0.21, 0.83, 0.62, 0.15, 0.73, 0.28},
	[]float64{0.111, 0.837, 0.148, 0.392, 0.521, 0.235, 0.721, 0.311, 0.173},
	[]float64{1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0},
	[]float64{1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8, 9.9},
	[]float64{1.11, 2.18, 3.34, 4.21, 5.83, 6.62, 7.15, 8.73, 9.28},
	[]float64{1.111, 2.837, 3.148, 4.392, 5.521, 6.235, 7.721, 8.311, 9.173},
	[]float64{11.0, 18.0, 34.0, 21.0, 83.0, 62.0, 15.0, 73.0, 28.0},
	[]float64{11.1, 18.2, 34.3, 21.4, 83.5, 62.6, 15.7, 73.8, 28.9},
	[]float64{11.11, 18.18, 34.34, 21.21, 83.83, 62.62, 15.15, 73.73, 28.28},
	[]float64{11.111, 18.837, 34.148, 21.392, 83.521, 62.235, 15.721, 73.311, 28.173},
	[]float64{111.0, 837.0, 148.0, 392.0, 521.0, 235.0, 721.0, 311.0, 173.0},
	[]float64{111.1, 837.2, 148.3, 392.4, 521.5, 235.6, 721.7, 311.8, 173.9},
	[]float64{111.11, 837.18, 148.34, 392.21, 521.83, 235.62, 721.15, 311.73, 173.28},
	[]float64{111.111, 837.837, 148.148, 392.392, 521.521, 235.235, 721.721, 311.311, 173.173},
	[]float64{1.797693134862315708145274237317043567981e+308, 1.697693134862315708145274237317043567981e+308, 1.597693134862315708145274237317043567981e+308, 1.497693134862315708145274237317043567981e+308, 1.397693134862315708145274237317043567981e+308, 1.297693134862315708145274237317043567981e+308, 1.197693134862315708145274237317043567981e+308, 1.097693134862315708145274237317043567981e+308, 1.007693134862315708145274237317043567981e+308},

	[]float64{4.940656458412465441765687928682213723651e-324, 4.840656458412465441765687928682213723651e-324, 4.740656458412465441765687928682213723651e-324, 4.640656458412465441765687928682213723651e-324, 4.540656458412465441765687928682213723651e-324, 4.440656458412465441765687928682213723651e-324,  4.340656458412465441765687928682213723651e-324, 4.240656458412465441765687928682213723651e-324, 4.140656458412465441765687928682213723651e-324},
	[]float64{0.0, 10.0, 120.20, 0.0001, 1620.201, 30.0, 99.9999, 1991.1, 0.0},
	[]float64{0.12, 10.2, 0.322141, 1000.4, 0.6, 0.6, 0.6, 99.81, 170.92},
	[]float64{0.11, 0.18, 0.18, 1.1, 110.823, 1230.6352, 990.1, 20.72183113, 10.28},
	[]float64{0.111, 22.837, 1860.1348, 110.3, 0.0, 0.5, 0.72, 0.173, 0.173},
	[]float64{1.0, 20.02, 32.0001, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0},
	[]float64{1.1, 5.5, 5.5, 5.5, 5.5, 5.5, 5.5, 5.5, 5.5},
	[]float64{1.11, 2.18, 2.18, 214.21, 5.8003, 12351236.602, 107.5, 9998.7213, 79.228},
	[]float64{1.111, 2.87, 3.1, 40.392, 50.0521, 16.2235, 9997.9721, 18.311, 49.1273},
	[]float64{11.0, 11.0, 11.0, 991.0, 83.3, 2.0, 5.0, 73.00000001, 88.0},
	[]float64{11.1, 0.2, 4.301, 0.0, 8.1, 2.25122646, 5.37, 9973.8, 128.29},
	[]float64{11.11, 11.11, 11.11, 21.21, 83.83, 2.62, 0.125, 273.7, 2223.0},
	[]float64{11.111, 218.1837, 234.148, 1000021.3292, 283.1, 2.235, 5.1, 3.311, 222164538.17},
	[]float64{111.0, 837.02, 18.0, 2.01, 5.02, 5.2, 721.0, 721.0, 721.0},
	[]float64{111.1, 837.2312, 148.222243, 10392.4, 2521.5999, 235.6221, 2721.0, 11.8, 3.9},
	[]float64{111.11, 837.1809, 18.34, 2.21, 1.831, 5.622511, 1.1225, 311.2732, 12273.225123218},
	[]float64{111.111, 111.111, 111.111, 111.111, 0.0, 5.2235, 21.1, 1.11, 1222131273.193},
	[]float64{1.797693134862315708145274237317043567981e+308, 1.697693134862315708145274237317043567981e+308, 1.597693134862315708145274237317043567981e+308, 1.497693134862315708145274237317043567981e+308, 1.397693134862315708145274237317043567981e+308, 1.297693134862315708145274237317043567981e+308, 1.197693134862315708145274237317043567981e+308, 1.097693134862315708145274237317043567981e+308, 1.007693134862315708145274237317043567981e+308},

	[]float64{1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0},
	[]float64{2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0},
	[]float64{3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0},
	[]float64{4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0},
	[]float64{5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0},
	[]float64{6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0},
	[]float64{7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0},
	[]float64{8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0},
	[]float64{9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0},

	[]float64{4.940656458412465441765687928682213723651e-324, -4.840656458412465441765687928682213723651e-324, 4.740656458412465441765687928682213723651e-324, 4.640656458412465441765687928682213723651e-324, 4.540656458412465441765687928682213723651e-324, 4.440656458412465441765687928682213723651e-324,  4.340656458412465441765687928682213723651e-324, 4.240656458412465441765687928682213723651e-324, 4.140656458412465441765687928682213723651e-324},
	[]float64{0.0, 10.0, 120.20, 0.0001, -1620.201, -30.0, 99.9999, 1991.1, 0.0},
	[]float64{0.12, 10.2, -0.322141, 1000.4, 0.6, 0.6, 0.6, 99.81, 170.92},
	[]float64{-0.11, -0.18, 0.18, -1.1, 110.823, 1230.6352, 990.1, 20.72183113, 10.28},
	[]float64{-0.111, 22.837, 1860.1348, 110.3, 0.0, -0.5, 0.72, 0.173, 0.173},
	[]float64{-1.0, 20.02, 32.0001, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0},
	[]float64{1.1, 5.5, -5.5, -5.5, -5.5, 5.5, 5.5, 5.5, 5.5},
	[]float64{1.11, 2.18, 2.18, 214.21, 5.8003, 12351236.602, 107.5, -9998.7213, 79.228},
	[]float64{1.111, -2.87, -3.1, -40.39, -50.0521, -116.2235, -9997.9721, 18.311, 49.1273},
	[]float64{11.0, 11.0, 11.0, 991.0, 83.3, -2.0, 5.0, 73.00000001, 88.0},
	[]float64{11.1, -0.2, 4.301, 0.0, 8.1, 2.25122646, 5.37, 9973.8, 128.29},
	[]float64{11.11, 11.11, 11.11, 21.21, -83.83, -2.62, 0.125, 273.7, 2223.0},
	[]float64{11.111, 218.1837, 234.148, -1000021.3292, 283.1, 2.235, 5.1, 3.311, 222164538.17},
	[]float64{111.0, 837.02, 18.0, -2.01, 5.02, 5.2, 721.0, 721.0, 721.0},
	[]float64{111.1, 837.2312, 148.222243, -10392.4, 2521.5999, 235.6221, 2721.0, 11.8, 3.9},
	[]float64{111.11, 837.1809, 18.34, 2.21, 1.831, 5.622511, -1.1225, 311.2732, 12273.225123218},
	[]float64{111.111, 111.111, 111.111, 111.111, 0.0, 5.2235, 21.1, -1.11, 1222131273.193},
	[]float64{1.797693134862315708145274237317043567981e+308, -1.697693134862315708145274237317043567981e+308, -1.597693134862315708145274237317043567981e+308, 1.497693134862315708145274237317043567981e+308, 1.397693134862315708145274237317043567981e+308, 1.297693134862315708145274237317043567981e+308, 1.197693134862315708145274237317043567981e+308, -1.097693134862315708145274237317043567981e+308, 1.007693134862315708145274237317043567981e+308},
}


func TestMin(t *testing.T) {
	actual, err := Min([]float64{})
	if err == nil {
		t.Errorf("cannot calculate min: calculates empty data")
	}
	expected := []float64{4.940656458412465441765687928682213723651e-324, 0, 0.1, 0.11, 0.111, 1.0, 1.1, 1.11, 1.111, 11.0, 11.1, 11.11, 11.111, 111.0, 111.1, 111.11, 111.111, 111.111, 1.797693134862315708145274237317043567981e+308, 4.840656458412465441765687928682213723651e-324, 0.0, 0.1, 0.11, 0.111, 1.0, 1.1, 1.11, 1.111, 11.0, 11.1, 11.11, 11.111, 111.0, 111.1, 111.11, 111.111, 1.6976931348623157e+308, 4.940656458412465441765687928682213723651e-324, 0.0, 0.1, 0.0, 0.111, 1.0, 1.1, 1.11, 1.111, 8.0009, 0.2, 11.11, 0.8, 111.0, 111.1, 7.1, 8.0, 62310931.00012305, 4.740656458412465441765687928682213723651e-324, 0.0, 0.4, 0.21, 0.235, 4.0, 4.4, 4.21, 4.392, 21.0, 21.4, 21.21, 21.392, 235.0, 235.6, 235.62, 235.235, 1.597693134862315708145274237317043567981e+308, 4.940656458412465441765687928682213723651e-324, 0.01, 0.4, 0.21, 0.0, 0.0001, 4.4, 1e-06, 0.35, 21.0, 0.6124, 6.6, 0.0, 0.0009, 5.62, 3.7399, 1.3119, 0.0, 4.140656458412465441765687928682213723651e-324, 0.0, 0.1, 0.11, 0.111, 1.0, 1.1, 1.11, 1.111, 11.0, 11.1, 11.11, 11.111, 111.0, 111.1, 111.11, 111.111, 1.007693134862315708145274237317043567981e+308, 4.140656458412465441765687928682213723651e-324, 0.0, 0.12, 0.11, 0.0, 1.0, 1.1, 1.11, 1.111, 2.0, 0.0, 0.125, 2.235, 2.01, 3.9, 1.1225, 0.0, 1.007693134862315708145274237317043567981e+308, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, -4.840656458412465441765687928682213723651e-324, -1620.201, -0.322141, -1.1, -0.5, -1.0, -5.5, -9998.7213, -9997.9721, -2.0, -0.2, -83.83, -1000021.3292, -2.01, -10392.4, -1.1225, -1.11, -1.697693134862315708145274237317043567981e+308}
	for i, data := range baseStatDataTests {
		actual, _ = Min(data)
		if !reflect.DeepEqual(actual, expected[i]) {
			t.Errorf("cannot calculate min:\ntest:\t%#v\ngot:\t%#v\nwant:\t%#v\n\n", data, actual, expected[i])
		}
	}	
}

func TestMax(t *testing.T) {
	actual, err := Max([]float64{})
	if err == nil {
		t.Errorf("cannot calculate max: calculates empty data")
	}
	expected := []float64{4.940656458412465441765687928682213723651e-324, 0, 0.1, 0.11, 0.111, 1.0, 1.1, 1.11, 1.111, 11.0, 11.1, 11.11, 11.111, 111.0, 111.1, 111.11, 111.111, 111.111, 1.7976931348623157e+308, 4.940656458412465441765687928682213723651e-324, 0.0, 0.2, 0.18, 0.837, 2.0, 2.2, 2.18, 2.837, 18.0, 18.2, 18.18, 18.837, 837.0, 837.2, 837.18, 837.837, 1.7976931348623157e+308, 0.1, 2.2412, 40.2, 0.11, 10.8, 2.31, 2.0, 2.198, 2.7, 11.0, 11.1, 118.180008, 11.111, 837113.000003, 837.2091, 111.11, 111.111, 1.6976931348623157e+308, 4.940656458412465441765687928682213723651e-324, 0.0, 0.8, 0.73, 0.392, 8.0, 8.8, 8.73, 8.311, 73.0, 73.8, 73.73, 73.311, 392.0, 392.4, 392.21, 392.392, 1.797693134862315708145274237317043567981e+308, 400.1306, 100.0, 10.6, 20.0, 0.392, 106.0, 106.62, 1096.6202, 10.11, 73.0999, 73.8099, 732.0, 21.392, 2352.01, 392.4, 392.21, 392.392, 1.797693134862315708145274237317043567981e+308, 4.940656458412465441765687928682213723651e-324, 0.0, 0.9, 0.83, 0.837, 9.0, 9.9, 9.28, 9.173, 83.0, 83.5, 83.83, 83.521, 837.0, 837.2, 837.18, 837.837, 1.797693134862315708145274237317043567981e+308, 4.940656458412465441765687928682213723651e-324, 1991.1, 1000.4, 1230.6352, 1860.1348, 32.0001, 5.5, 12351236.602, 9997.9721, 991.0, 9973.8, 2223.0, 222164538.17, 837.02, 10392.4, 12273.225123218, 1222131273.193, 1.7976931348623157e+308, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 4.940656458412465441765687928682213723651e-324, 1991.1, 1000.4, 1230.6352, 1860.1348, 32.0001, 5.5, 12351236.602, 49.1273, 991.0, 9973.8, 2223.0, 222164538.17, 837.02, 2721.0, 12273.225123218, 1222131273.193, 1.797693134862315708145274237317043567981e+308}
	for i, data := range baseStatDataTests {
		actual, _ = Max(data)
		if !reflect.DeepEqual(actual, expected[i]) {
			t.Errorf("cannot calculate max:\ntest:\t%#v\ngot:\t%#v\nwant:\t%#v\n\n", data, actual, expected[i])	
		}
	} 
}

func TestRange(t *testing.T) {
	actual, err := Range([]float64{})
	if err == nil {
		t.Errorf("cannot calculate range: calculates empty data")
	}
	for _, data := range baseStatDataTests[:19] {
		if actual, err = Range(data); err == nil {
			t.Errorf("cannot calculate range: calculates data with a one value:\ntest:\t%#v\ngot:\t%#v\n\n", data, actual)
		}
	}
	expected := []float64{0.0, 0.0, 0.1, 0.06999999999999999, 0.726, 1.0, 1.1, 1.07, 1.7260000000000002, 7.0, 7.1, 7.07, 7.725999999999999, 726.0, 726.1, 726.0699999999999, 726.726, 9.999999999999996e+306, 0.1, 2.2412, 40.1, 0.11, 10.689, 1.31, 0.8999999999999999, 1.0879999999999999, 1.5890000000000002, 2.9991000000000003, 10.9, 107.070008, 10.311, 837002.000003, 726.1091, 104.01, 103.111, 1.6976931348623157e+308, 0.0, 0.0, 0.4, 0.52, 0.15700000000000003, 4.0, 4.4, 4.5200000000000005, 3.9189999999999996, 52.0, 52.4, 52.52, 51.91900000000001, 157.0, 156.79999999999998, 156.58999999999997, 157.15699999999998, 1.9999999999999992e+307, 400.1306, 99.99, 10.2, 19.79, 0.392, 105.9999, 102.22, 1096.620199, 9.76, 52.099900000000005, 73.1975, 725.4, 21.392, 2352.0091, 386.78, 388.4701, 391.0801, 1.7976931348623157e+308, 0.0, 0.0, 0.8, 0.72, 0.726, 8.0, 8.8, 8.17, 8.062, 72.0, 72.4, 72.72, 72.41, 726.0, 726.1, 726.0699999999999, 726.726, 7.9e+307, 0.0, 1991.1, 1000.28, 1230.5252, 1860.1348, 31.000100000000003, 4.4, 12351235.492, 9996.8611, 989.0, 9973.8, 2222.875, 222164535.93499997, 835.01, 10388.5, 12272.102623218001, 1222131273.193, 7.9e+307, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1e-323, 3611.301, 1000.722141, 1231.7351999999998, 1860.6348, 33.0001, 11.0, 12361235.3233, 10047.099400000001, 993.0, 9974.0, 2306.83, 223164559.4992, 839.03, 13113.4, 12274.347623218, 1222131274.303}
	for i, data := range baseStatDataTests[19:153] {
		actual, _ = Range(data)
		if !reflect.DeepEqual(actual, expected[i]) {
			t.Errorf("cannot calculate range:\ntest:\t%#v\ngot:\t%#v\nwant:\t%#v\n\n", data, actual, expected[i])	
		}
	}
}

func TestSum(t *testing.T) {
	actual, err := Sum([]float64{})
	if err == nil {
		t.Errorf("cannot calculate sum: calculates empty data")
	}
	expected := []float64{4.940656458412465441765687928682213723651e-324, 0, 0.1, 0.11, 0.111, 1.0, 1.1, 1.11, 1.111, 11.0, 11.1, 11.11, 11.111, 111.0, 111.1, 111.11, 111.111, 111.111, 1.797693134862315708145274237317043567981e+308, 9.781312916824930883531375857364427447302e-324, 0.0, 0.30000000000000004, 0.29, 0.948, 3.0, 3.3000000000000003, 3.29, 3.9480000000000004, 29.0, 29.299999999999997, 29.29, 29.948, 948.0, 948.3000000000001, 948.29, 948.948, 0.1, 2.2412, 40.300000000000004, 0.11, 10.911000000000001, 3.31, 3.1, 3.308, 3.811, 19.0009, 11.299999999999999, 129.290008, 11.911000000000001, 837224.000003, 948.3091000000001, 118.21, 119.111, 1.697693134862315708145274237317043567981e+308, 1.452196937523739632529706378604664117095e-323, 0.0, 1.8, 1.56, 0.938, 18.0, 19.8, 19.560000000000002, 18.938000000000002, 156.0, 157.8, 157.56, 156.938, 938.0, 939.8, 939.56, 938.9379999999999, 400.1306, 110.102, 13.8009, 30.83, 0.627, 110.0001, 200.82, 1100.8302010000002, 14.852, 156.18990000000002, 95.8223, 759.81, 24.692, 2744.0109, 428.8324, 421.56989999999996, 418.9339, 1.7976931348623157e+308, 4.4e-323, 0.0, 4.5, 3.45, 3.449, 45.0, 49.5, 48.45, 48.449, 345.0, 349.49999999999994, 348.45000000000005, 348.44900000000007, 3449.0, 3453.5000000000005, 3452.4500000000003, 3452.4490000000005, 4.4e-323, 3871.501, 1283.572141, 2364.13003113, 1994.9488000000001, 77.0201, 45.1, 12361647.5316, 10179.159000000001, 1275.3000000099998, 10133.412226460001, 2637.815, 223165316.68789998, 3141.25, 16982.875443, 13561.915234218, 1.2221317450705001e+09, 16.0, 32.0, 48.0, 64.0, 80.0, 96.0, 112.0, 128.0, 144.0, 3.5e-323, 571.0989999999999, 1282.9278590000001, 2361.35003113, 1993.7268, 75.0201, 12.1, 12341650.089, -10142.058400000002, 1271.3000000099998, 10133.01222646, 2464.915, 221165274.02949998, 3137.23, -3801.924556999999, 13559.670234218, 1222131742.8505}
	n := 0
	for i := 0; i < len(baseStatDataTests)-1; i++ {
		if i == 36 || i == 72 || i == 108 || i == 126 {
			continue
		}
		actual, _ = Sum(baseStatDataTests[i])
		if !reflect.DeepEqual(actual, expected[n]) {	
			t.Errorf("cannot calculate sum:\ntest:\t%#v\ngot:\t%#v\nwant:\t%#v\n\n", baseStatDataTests[i], actual, expected[n])	
		}
		n++	
	}
}

func TestArithmeticMean(t *testing.T) {
	actual, err := Sum([]float64{})
	if err == nil {
		t.Errorf("cannot calculate arithmetic mean: calculates empty data")
	}
	expected := []float64{4.940656458412465441765687928682213723651e-324, 0.0, 0.1, 0.11, 0.111, 1.0, 1.1, 1.11, 1.111, 11.0, 11.1, 11.11, 11.111, 111.0, 111.1, 111.11, 111.111, 111.111, 1.797693134862315708145274237317043567981e+308, 4.890656458412465441765687928682213723651e-324, 0.0, 0.15000000000000002, 0.145, 0.474, 1.5, 1.6500000000000001, 1.645, 1.9740000000000002, 14.5, 14.649999999999999, 14.645, 14.974, 474.0, 474.15000000000003, 474.145, 474.474, 0.05, 1.1206, 20.150000000000002, 0.055, 5.455500000000001, 1.655, 1.55, 1.654, 1.9055, 9.50045, 5.6499999999999995, 64.645004, 5.955500000000001, 418612.0000015, 474.15455000000003, 59.105, 59.5555, 8.488465674311578540726371186585217839905e+307, 4.840656458412465441765687928682213723651e-324, 0.0, 0.6, 0.52, 0.31266666666666665, 6.0, 6.6000000000000005, 6.5200000000000005, 6.312666666666668, 52.0, 52.6, 52.52, 52.312666666666665, 312.6666666666667, 313.26666666666665, 313.18666666666667, 312.9793333333333, 133.37686666666667, 36.70066666666667, 4.6003, 10.276666666666666, 0.209, 36.6667, 66.94, 366.9434003333334, 4.950666666666667, 52.063300000000005, 31.940766666666665, 253.26999999999998, 8.230666666666666, 914.6703000000001, 142.94413333333333, 140.52329999999998, 139.64463333333333, 5.992310449541053e+307, 5e-324, 0.0, 0.5, 0.38333333333333336, 0.3832222222222222, 5.0, 5.5, 5.383333333333334, 5.383222222222222, 38.333333333333336, 38.83333333333333, 38.71666666666667, 38.716555555555566, 383.22222222222223, 383.7222222222223, 383.6055555555556, 383.6054444444445, 5e-324, 430.1667777777778, 142.61912677777778, 262.68111457000003, 221.6609777777778, 8.557788888888888, 5.011111111111111, 1373516.3924, 1131.0176666666669, 141.7000000011111, 1125.934691828889, 293.09055555555557, 24796146.298655555, 349.02777777777777, 1886.9861603333334, 1506.8794704686668, 135792416.11894447, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 5e-324, 63.45544444444444, 142.5475398888889, 262.3722256811111, 221.52519999999998, 8.335566666666667, 1.3444444444444443, 1371294.4543333333, -1126.8953777777779, 141.25555555666665, 1125.8902473844444, 273.87944444444446, 24573919.336611107, 348.5811111111111, -422.4360618888888, 1506.6300260242222, 135792415.8722778}
	n := 0
	for i := 0; i < len(baseStatDataTests)-1; i++ {
		if i == 36 || i == 72 || i == 108 || i == 126 {
			continue
		}
		actual, _ = ArithmeticMean(baseStatDataTests[i])
		if !reflect.DeepEqual(actual, expected[n]) {	
			t.Errorf("cannot calculate arithmetic mean:\ntest:\t%#v\ngot:\t%#v\nwant:\t%#v\n\n", baseStatDataTests[i], actual, expected[n])	
		}
		n++	
	}
}

func TestMedian(t *testing.T) {
	actual, err := Median([]float64{})
	if err == nil {
		t.Errorf("cannot calculate median: calculates empty data")
	}
	expected := []float64{4.940656458412465441765687928682213723651e-324, 0.0, 0.1, 0.11, 0.111, 1.0, 1.1, 1.11, 1.111, 11.0, 11.1, 11.11, 11.111, 111.0, 111.1, 111.11, 111.111, 111.111, 1.797693134862315708145274237317043567981e+308, 4.890656458412465441765687928682213723651e-324, 0.0, 0.15000000000000002, 0.145, 0.474, 1.5, 1.6500000000000001, 1.645, 1.9740000000000002, 14.5, 14.649999999999999, 14.645, 14.974, 474.0, 474.15000000000003, 474.145, 474.474, 0.05, 1.1206, 20.150000000000002, 0.055, 5.455500000000001, 1.655, 1.55, 1.654, 1.9055, 9.50045, 5.6499999999999995, 64.645004, 5.955500000000001, 418612.0000015, 474.15455000000003, 59.105, 59.5555, 8.488465674311578540726371186585217839905e+307, 4.840656458412465441765687928682213723651e-324, 0.0, 0.6, 0.62, 0.311, 6.0, 6.6, 6.62, 6.235, 62.0, 62.6, 62.62, 62.235, 311.0, 311.8, 311.73, 311.311, 1.697693134862315708145274237317043567981e+308, 4.740656458412465441765687928682213723651e-244, 10.092, 2.8009, 10.62, 0.235, 4.0, 89.8, 4.21, 4.392, 62.09, 21.4, 21.21, 3.3, 392.0, 30.8124, 25.62, 25.23, 10.000009, 4.540656458412465441765687928682213723651e-324, 0.0, 0.5, 0.28, 0.311, 5.0, 5.5, 5.83, 5.521, 28.0, 28.9, 28.28, 28.173, 311.0, 311.8, 311.73, 311.311, 1.397693134862315708145274237317043567981e+308, 4.540656458412465441765687928682213723651e-324, 30.0, 0.6, 10.28, 0.5, 4.0, 5.5, 79.228, 18.311, 11.0, 5.37, 11.11, 218.1837, 111.0, 235.6221, 18.34, 111.111, 1.3976931348623157e+308, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 4.440656458412465441765687928682213723651e-324, 0.0001, 0.6, 10.28, 0.173, 4.0, 5.5, 5.8003, -3.1, 11.0, 5.37, 11.11, 11.111, 111.0, 148.222243, 18.34, 111.111, 1.197693134862315708145274237317043567981e+308}
	n := 0
	for i := 0; i < len(baseStatDataTests); i++ {
		if i == 36 {
			continue
		}
		actual, _ = Median(baseStatDataTests[i])
		if !reflect.DeepEqual(actual, expected[n]) {	
			t.Errorf("cannot calculate median:\ntest:\t%#v\ngot:\t%#v\nwant:\t%#v\n\n", baseStatDataTests[i], actual, expected[n])	
		}
		n++	
	}
}

func TestMode(t *testing.T) {
	actual, err := Mode([]float64{})
	if err == nil {
		t.Errorf("cannot calculate mode: calculates empty data")
	}
	for _, data := range baseStatDataTests[:19] {
		if actual, err = Mode(data); err == nil {
			t.Errorf("cannot calculate mode: calculates data with a one value:\ntest:\t%#v\ngot:\t%#v\n\n", data, actual)
		}
	}
	expected := [][]float64{[]float64{5e-324}, []float64{0}, []float64{}, []float64{}, []float64{}, []float64{}, []float64{}, []float64{}, []float64{}, []float64{}, []float64{}, []float64{}, []float64{}, []float64{}, []float64{}, []float64{}, []float64{}, []float64{}, []float64{}, []float64{}, []float64{}, []float64{}, []float64{}, []float64{}, []float64{}, []float64{}, []float64{}, []float64{}, []float64{}, []float64{}, []float64{}, []float64{}, []float64{}, []float64{}, []float64{}, []float64{}, []float64{5e-324}, []float64{0}, []float64{}, []float64{}, []float64{}, []float64{}, []float64{}, []float64{}, []float64{}, []float64{}, []float64{}, []float64{}, []float64{}, []float64{}, []float64{}, []float64{}, []float64{}, []float64{}, []float64{}, []float64{}, []float64{}, []float64{}, []float64{}, []float64{}, []float64{}, []float64{}, []float64{}, []float64{}, []float64{}, []float64{}, []float64{}, []float64{}, []float64{}, []float64{}, []float64{}, []float64{}, []float64{5e-324}, []float64{0}, []float64{}, []float64{}, []float64{}, []float64{}, []float64{}, []float64{}, []float64{}, []float64{}, []float64{}, []float64{}, []float64{}, []float64{}, []float64{}, []float64{}, []float64{}, []float64{}, []float64{5e-324}, []float64{0}, []float64{0.6}, []float64{0.18}, []float64{0.173}, []float64{4.0}, []float64{5.5}, []float64{2.18}, []float64{}, []float64{11.0}, []float64{}, []float64{11.11}, []float64{}, []float64{721.0}, []float64{}, []float64{}, []float64{111.111}, []float64{}, []float64{1.0}, []float64{2.0}, []float64{3.0}, []float64{4.0}, []float64{5.0}, []float64{6.0}, []float64{7.0}, []float64{8.0}, []float64{9.0}, []float64{5e-324}, []float64{0}, []float64{0.6}, []float64{}, []float64{0.173}, []float64{4.0}, []float64{5.5}, []float64{2.18}, []float64{}, []float64{11.0}, []float64{}, []float64{11.11}, []float64{}, []float64{721.0}, []float64{}, []float64{}, []float64{111.111}, []float64{}}
	for i, data := range baseStatDataTests[19:153] {
		actual, _ = Mode(data)
		if !reflect.DeepEqual(actual, expected[i]) {
			t.Errorf("cannot calculate mode:\ntest:\t%#v\ngot:\t%#v\nwant:\t%#v\n\n", data, actual, expected[i])
		}
	}

	tests := [][]float64{[]float64{0, 0, 1.0, 1.0}, []float64{3.14, 3.14, 1.0, 3.14, 1.0, 1.0}, []float64{0, 0, 1.0, 1.0, 2.0}, []float64{6.91, 0, 6.91, 1.0, 0}, []float64{0, 0, 1.0, 1.0, 2.0, 3.1, 3.1, 3.1, -10.1, -10.1, -10.1}}
	expected = [][]float64{[]float64{}, []float64{}, []float64{0, 1.0}, []float64{6.91, 0}, []float64{3.1, -10.1}}

	for i, data := range tests {
		actual, _ = Mode(data)
		if !reflect.DeepEqual(actual, expected[i]) {
			t.Errorf("cannot calculate mode:\ntest:\t%#v\ngot:\t%#v\nwant:\t%#v\n\n", data, actual, expected[i])
		}
	}
}

func TestVariance(t *testing.T) {
	actual, err := Variance([]float64{})
	if err == nil {
		t.Errorf("cannot calculate variance: calculates empty data")
	}
	for _, data := range baseStatDataTests[:19] {
		if actual, err = Variance(data); err == nil {
			t.Errorf("cannot calculate variance: calculates data with a one value:\ntest:\t%#v\ngot:\t%#v\n\n", data, actual)
		}
	}
	expected := []float64{0.0, 0.0, 0.005000000000000001, 0.0024499999999999995, 0.263538, 0.5, 0.6050000000000001, 0.5724500000000001, 1.4895380000000005, 24.5, 25.205, 24.99245, 29.845537999999994, 263538.0, 263610.6050000001, 263588.82245, 264065.339538, 0.005000000000000001, 2.51148872, 804.0050000000001, 0.00605, 57.12736050000001, 0.8580500000000001, 0.4049999999999999, 0.5918719999999998, 1.2624605000000004, 4.497300405000001, 59.404999999999994, 5731.993306560033, 53.15836050000001, 350286174004.51105, 263617.2125514051, 5409.04005, 5315.9391605, 0.0, 0.0, 0.04000000000000001, 0.0751, 0.006164333333333336, 4.0, 4.840000000000001, 5.115100000000002, 3.8441643333333326, 751.0, 761.4399999999999, 766.0951, 747.7351643333335, 6164.333333333334, 6148.173333333332, 6131.698433333331, 6176.668164333332, 53368.165685453336, 3030.5158813333337, 28.438380269999996, 97.99943333333331, 0.038923000000000006, 3609.3296666700003, 3004.1668000000004, 399325.60500173667, 24.04848133333333, 754.0009296700002, 1422.7993230033335, 171940.1727, 132.6380213333333, 1587874.88349727, 46829.83631525333, 47629.33091167, 48053.94239460333, 0.0, 0.0, 0.07500000000000001, 0.0736, 0.06748519444444444, 7.5, 9.075000000000001, 8.1636, 7.482235194444446, 736.0, 741.9750000000001, 750.7936, 734.4460685277779, 67485.19444444444, 67476.74444444446, 67469.05387777777, 67620.23231852778, 0.0, 618698.4250084469, 107127.39284614017, 235820.84885347285, 378823.45396180445, 107.83563050111113, 2.1511111111111108, 16946777514381.521, 11056725.655680923, 102721.85999982824, 11010478.206905903, 531422.0669402778, 5478055277719002.0, 147055.40674444445, 11313596.905206997, 16375796.129983801, 1.6595607830470106e+17, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 822342.3961917801, 107150.35881493181, 236003.30488921012, 378891.15065046, 112.05896939000003, 28.367777777777775, 16953638664050.947, 11068852.464072514, 102863.33777760714, 11010590.798152864, 543675.7060652778, 5490398057383818.0, 147405.9552111111, 15118644.515975507, 16376641.796086252, 1.6595607838006582e+17}
	n := 0
	for i := 19; i < len(baseStatDataTests)-1; i++ {
		if i == 36 || i == 54 || i == 72 || i == 90 || i == 108 || i == 126 {
			continue
		}
		actual, _ = Variance(baseStatDataTests[i])
		if !reflect.DeepEqual(actual, expected[n]) {
			t.Errorf("cannot calculate variance:\ntest:\t%#v\ngot:\t%#v\nwant:\t%#v\n\n", baseStatDataTests[i], actual, expected[n])	
		}
		n++
	}
}

func TestSD(t *testing.T) {
	actual, err := SD([]float64{})
	if err == nil {
		t.Errorf("cannot calculate standard deviation: calculates empty data")
	}
	for _, data := range baseStatDataTests[:19] {
		if actual, err = SD(data); err == nil {
			t.Errorf("cannot calculate standard deviation: calculates data with a one value:\ntest:\t%#v\ngot:\t%#v\n\n", data, actual)
		}
	}
	expected := []float64{0.0, 0.0, 0.07071067811865477, 0.049497474683058325, 0.5133595231414335, 0.7071067811865476, 0.7778174593052023, 0.7566042558696059, 1.2204663043279813, 4.949747468305833, 5.020458146424487, 4.999244942988891, 5.463106991447265, 513.3595231414336, 513.4302338195522, 513.4090206161165, 513.872882664575, 0.07071067811865477, 1.5847677179952904, 28.354981925580557, 0.07778174593052023, 7.5582643841030075, 0.9263098833543773, 0.6363961030678927, 0.7693321779309636, 1.1235926753054242, 2.120683947456575, 7.707463914933368, 75.70992871849789, 7.290978020814492, 591849.790068824, 513.436668491261, 73.5461763112128, 72.9104873149261, 0.0, 0.0, 0.2, 0.2740437921208944, 0.07851326851770557, 2.0, 2.2, 2.2616586833560897, 1.9606540575362428, 27.40437921208944, 27.594202289611488, 27.678423004210337, 27.344746558220894, 78.51326851770555, 78.41028844056966, 78.30516223936536, 78.59178178622325, 231.0155096210065, 55.0501215378616, 5.332764786674919, 9.899466315581527, 0.19728912793157155, 60.07769691549436, 54.81028005766802, 631.9221510611387, 4.903925094588347, 27.459077363779, 37.720012234930856, 414.65669257833036, 11.516858136372667, 1260.1090760316229, 216.40202474850676, 218.24145094749989, 219.21209454453768, 0.0, 0.0, 0.2738612787525831, 0.2712931993250107, 0.259779126267767, 2.7386127875258306, 3.012474066278414, 2.857201427971084, 2.7353674697276866, 27.129319932501073, 27.239218050450717, 27.400613131826084, 27.10066546282172, 259.779126267767, 259.76286194228084, 259.74805846777326, 260.03890539403477, 0.0, 786.5738522277784, 327.3032123981373, 485.6138886538078, 615.486355626024, 10.384393602955885, 1.4666666666666666, 4116646.3917103107, 3325.165508013236, 320.5025116903583, 3318.2040634816153, 728.9870142466722, 74013885.70882495, 383.4780394552528, 3363.5690724596393, 4046.701883013351, 407377071.4027743, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 906.8309634059592, 327.3382941467921, 485.80171355112583, 615.5413476367448, 10.585790919435356, 5.326140983655781, 4117479.6495005228, 3326.9884977367315, 320.72314817862326, 3318.221029128841, 737.3436824610881, 74097220.30807781, 383.9348319846887, 3888.2701187000253, 4046.8063699769787, 407377071.4952743}
	n := 0
	for i := 19; i < len(baseStatDataTests)-1; i++ {
		if i == 36 || i == 54 || i == 72 || i == 90 || i == 108 || i == 126 {
			continue
		}
		actual, _ = SD(baseStatDataTests[i])
		if !reflect.DeepEqual(actual, expected[n]) {
			t.Errorf("cannot calculate standard deviation:\ntest:\t%#v\ngot:\t%#v\nwant:\t%#v\n\n", baseStatDataTests[i], actual, expected[n])	
		}
		n++
	}
}